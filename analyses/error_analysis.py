# -*- coding: utf-8 -*-
"""ScholaWrite-LLM-Error-Analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/astrohl/scholawrite-llm-error-analysis.1aba0355-d7f2-444e-a3e0-79d6ecb78f40.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250610/auto/storage/goog4_request%26X-Goog-Date%3D20250610T182848Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D752eade0e0b0b771f9acfe9d342782245110e8e09d3d49dc187b6686c8a34e494c65ea3b9288d61ebf0c1ed3ba43653c50b5bc4e4f64e63ad31f4ef448e66d94f096b3067a1713de15f802d37fb72523c4d046c7f64d05c4b7fc09e66d439a6e4fffac5a1f5b4dd594d6691656b5f526d08fe07983879772c7a2bf881513e45038cd59c6693f41b0a5a5690b7ae2bebb9cf449ff429cfc12211903f86c9a0618115c2e0bedd3feee69eeb5e3213079831e7e325e215c841cc5e01d6287b6c05e8b9d30de2e6729be5f6ae0c59140a3345b8dc738fe3abe44bfefd61ccbdc4a48430df8ad76bde0941d5cb7e96175f1d68e85094c4f2ded3524a5f78c45754dbd
"""

# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE
# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.
import kagglehub
kagglehub.login()

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

astrohl_llama_errors_path = kagglehub.dataset_download('astrohl/llama-errors')

print('Data source import complete.')

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns

data = pd.read_csv("/kaggle/input/llama-errors/small_testing_data_with_llama_pred.csv")
data.head()

"""## Error Statistic"""

accuracy = (data['label'] == data['llama predicted label']).mean()
print(f"acc: {accuracy:.4f}")

from sklearn.metrics import f1_score

true_labels = data['label']
pred_labels = data['llama predicted label']

f1 = f1_score(true_labels, pred_labels, average='weighted')
print(f"Weighted F1-score: {f1:.4f}")

from sklearn.metrics import classification_report
print(classification_report(data["label"], data["llama predicted label"]))

"""Our classification report shows that the LLM struggles significantly in accurately predicting user writing intentions across most categories, with an overall accuracy of only 15% and a weighted F1-score of 0.12. While categories like Object Insertion and Text Production are predicted relatively better (F1 > 0.2), a majority of fine-grained intentions such as Fluency, Cross-reference, and Coherence exhibit extremely low recall and F1-scores. This indicates that the model is biased towards dominant categories and lacks the semantic sensitivity required for intent classification. We further attribute the performance degradation to overlapping label definitions and prompt ambiguity, suggesting future work in label restructuring and targeted fine-tuning.

## Confusion Matrix
"""

import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay

labels = [
    'Text Production', 'Visual Formatting', 'Clarity', 'Section Planning',
    'Structural', 'Object Insertion', 'Cross-reference', 'Fluency',
    'Idea Generation', 'Idea Organization', 'Citation Integration', 'Coherence',
    'Linguistic Style', 'Scientific Accuracy', 'Macro Insertion'
]

cm = confusion_matrix(data["label"], data["llama predicted label"], labels=labels)

fig, ax = plt.subplots(figsize=(14, 10))

disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=labels)
disp.plot(cmap="viridis", ax=ax, xticks_rotation=45)

plt.xticks(fontsize=10)
plt.yticks(fontsize=10)

plt.title("Confusion Matrix: True vs Predicted Intention")
plt.tight_layout()
plt.show()

"""This confusion matrix shows that while the LLM can predict dominant intentions like Text Production and Object Insertion with high accuracy, it struggles significantly with semantically close categories such as Clarity vs. Text Production and Structural & Section Planning vs. Text Production."""

data['label'].value_counts()

